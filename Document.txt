I 两张表。
表1：菜名编号，菜名，所用食材。例如：  1，番茄炒蛋，番茄 鸡蛋；2，红烧肉，猪肉 糖 八角；…
表2：食材名和食材编号。例如：  西红柿 1； 鸡蛋 2； 猪肉 3； 糖 4； 八角 5；…

II 界面：
有两个页面。
一个页面是修改菜谱的页面，可以先提供一个默认版本，用户也可以把默认版本修改掉换成自己家菜谱。可以贡献菜谱。
另一个页面是冰箱页面，选择现在冰箱里有什么吃的，然后提交，就会给出“可以做什么菜”的报告：
例如：可以做  红烧肉  已有：猪肉  还缺：糖，八角

III 菜谱页面:
类似留言板：插入菜谱，删除菜谱
复杂版本：删除时确认；可以修改；搜索出西红柿的标签，点西红柿即可；西红柿和番茄代表同样的东西，怎么办？

IV 冰箱页面：
类似留言板：左右两个列表：左边是冰箱里没加的，右边是冰箱有的。支持两边互相加。列表得能搜索
每个用户都有一个冰箱

V 报告页面：
点击提交之后跳转到报告页面。
给出 可以做  红烧肉  已有：猪肉  还缺：糖，八角。
如果不点提交，也可以访问该页面，给出的结果是上次搜索的结果




数据库：
插入用户
	insertUser
	Input: 
		string user_id
		list stock = []
	Output:
		None
插入菜谱（插入新的食材）
	insertReceipeEntry()
	Input:
		string dish_name, 
		list materials
	Output:
		None
删除菜谱
	deleteReceipeEntry()
	Input:
		int dish_id
	Output:
		None
修改菜谱
	##
更新冰箱：插入
	insertToFridge()
	Input:
		string user_id
		list materials
	Output:
		None
更新冰箱：删除（假设食材必须从表里选）
	deleteFromFridge()
	Input:
		string user_id
		list materials
	Output:
		None
给出所有菜谱以供查询
	deliverReceipe():
	Input:
		None
	Output:
		list [(dish_id, dish_name, list materials), … ]
给出用户冰箱以供查询
	deliverFridge():
	Input:
		int user_id
	Output:
		list materials 

验证是否是正确的用户名密码：
	verifyPassword():
	Input: 
		string user_name
		string password
	Output:
		int user_id  (acceptable)
		-1	(unacceptable)


所需页面：
菜谱：/receipe：	/insert, /delete (, /edit)
冰箱：/fridge：	/insert, /delete
报告：/report：







//用户表：用户ID -> 冰箱（拥有食材list： 类型string）
//	addUser():
//	Input:
//		string user_id
//		list material_id
//	Output:
//		None



//  登录部分：
// 实现登录 debug 页面：显示当前登录的是谁（用户请求时，查看 session，看是谁）
// 实现一个 login 页面（url：/， 有一个登录框，action 是 login）
// 实现 login 页面，判断 userid 和加盐加密密码是否匹配。如果匹配，redirect 并设置 session 的 user_name。如果不匹配，返回登录页面. 这个 login 没有自己的页面，他是 redirect 的，要么到 result，要么到/页面
// 实现 logout。让网站把已经给出去的 session 记录抹掉。（返回时，将 session 重置）
// 功能页面： 加载时先判断是否登录。如未登录，redirect 到主页。
// 功能页面： 每一个功能页面的函数里都要夹带用户信息————（查 flask 功能： 在登陆之后，调子函数之前就能确定用户是谁了）
// 功能页面： 根据用户更改逻辑（查表给结果的时候都要判断 userid 了。）

一个表： 
记录的是 1. 用户的 id， 2. 用户名， 3. 用户的 password+salt 的 md5
返回给用户的 cookie 是   用户 id+密码加盐的 md5加密。

用户访问网站， 访问 url：/
返回登录表单
用户填表单之后， 采用 post 方法， 请求 url： /login， 两个 field： username+password
返回 redirect 页面： /result  并且携带 cookie： {userid+passhash}
用户下次访问主页，就用这个 cookie
用户访问任何页面都要先检查登录是否有效。 如果登录无效，直接 redirect 到主页 url：/